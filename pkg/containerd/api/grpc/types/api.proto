syntax = "proto3";

package types;

service API {
	rpc CreateContainer(CreateContainerRequest) returns (CreateContainerResponse) {}
	rpc UpdateContainer(UpdateContainerRequest) returns (UpdateContainerResponse) {}
	rpc Signal(SignalRequest) returns (SignalResponse) {}
	rpc AddProcess(AddProcessRequest) returns (AddProcessResponse) {}
	rpc CreateCheckpoint(CreateCheckpointRequest) returns (CreateCheckpointResponse) {}
	rpc DeleteCheckpoint(DeleteCheckpointRequest) returns (DeleteCheckpointResponse) {}
	rpc ListCheckpoint(ListCheckpointRequest) returns (ListCheckpointResponse) {}
	rpc State(StateRequest) returns (StateResponse) {}
	rpc Events(EventsRequest) returns (stream Event) {}
}

message CreateContainerRequest {
	string id = 1; // ID of container
	string bundlePath = 2; // path to OCI bundle
	string stdin = 3; // path to the file where stdin will be read (optional)
	string stdout = 4; // path to file where stdout will be written (optional)
	string stderr = 5; // path to file where stderr will be written (optional)
	string checkpoint = 7; // checkpoint name if you want to create immediate checkpoint (optional)
}

message CreateContainerResponse {
}

message SignalRequest {
	string id = 1; // ID of container
	uint32 pid = 2; // PID of process inside container
	uint32 signal = 3; // Signal which will be sent, you can find value in "man 7 signal"
}

message SignalResponse {
}

message AddProcessRequest {
	string id = 1; // ID of container
	bool terminal = 2; // Use tty for container stdio
	User user = 3; // User under which process will be run
	repeated string args = 4; // Arguments for process, first is binary path itself
	repeated string env = 5; // List of environment variables for process
	string cwd = 6; // Workind directory of process
};

message User {
	uint32 uid = 1; // UID of user
	uint32 gid = 2; // GID of user
	repeated uint32 additionalGids = 3; // Additional groups to which user will be added
}

message AddProcessResponse {
	uint32 pid = 1; // PID of process is returned in case of success
}

message CreateCheckpointRequest {
	string id = 1; // ID of container
	Checkpoint checkpoint = 2; // Checkpoint configuration
}

message CreateCheckpointResponse {
}

message DeleteCheckpointRequest {
	string id = 1; // ID of container
	string name = 2; // Name of checkpoint
}

message DeleteCheckpointResponse {
}

message ListCheckpointRequest {
	string id = 1; // ID of container
}

message Checkpoint {
	string name = 1; // Name of checkpoint
	bool exit = 2; // checkpoint configuration: should container exit on checkpoint or not
	bool tcp = 3; // allow open tcp connections
	bool unixSockets = 4; // allow external unix sockets
	bool shell = 5; // allow shell-jobs
}

message ListCheckpointResponse {
	repeated Checkpoint checkpoints = 1; // List of checkpoints
}

message StateRequest {
}

message ContainerState {
	string status = 1;
}

message Process {
	uint32 pid = 1;
	bool terminal = 2; // Use tty for container stdio
	User user = 3; // User under which process will be run
	repeated string args = 4; // Arguments for process, first is binary path itself
	repeated string env = 5; // List of environment variables for process
	string cwd = 6; // Workind directory of process
}

message Container {
	string id = 1; // ID of container
	string name = 2; // Name of container (???)
	string bundlePath = 3; // Path to OCI bundle
	repeated Process processes = 4; // List of processes which run in container
	string status = 5; // Container status ("running", "paused", etc.)
}

// Machine is information about machine on which containerd is run
message Machine {
	string id = 1; // ID of machine
	uint32 cpus = 2; // number of cpus
	uint64 memory = 3; // amount of memory
}

// StateResponse is information about containerd daemon
message StateResponse {
	repeated Container containers = 1;
	Machine machine = 2;
}

message UpdateContainerRequest {
	string id = 1; // ID of container
	uint32 signal = 2; // Signal
	string status = 3; // Status to whcih containerd will try to change
}

message UpdateContainerResponse {
}

message EventsRequest {
}

message Event {
	string type = 1;
	string id = 2;
	uint32 status = 3;
	string bundlePath = 4;
	uint32 pid = 5;
	uint32 signal = 7;
	Process process = 8;
	repeated Container containers = 9;
	Checkpoint checkpoint = 10;
}
